name: CI

on:
  pull_request:
    branches:
      - main
      - '!dependabot/**'

permissions:
  actions: read
  contents: read

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  version:
    name: 'Check version increment'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Check if version has been incremented compared to main branch
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          git fetch origin main
          git checkout origin/main -- package.json
          MAIN_VERSION=$(node -p "require('./package.json').version")

          git checkout -- package.json

          HIGHEST_VERSION=$(echo -e "$CURRENT_VERSION\n$MAIN_VERSION" | sort -V | tail -n1)

          if [ "$CURRENT_VERSION" = "$MAIN_VERSION" ]; then
            echo "Error: Version in package.json ($CURRENT_VERSION) has not been incremented compared to main branch ($MAIN_VERSION)."
            exit 1
          elif [ "$HIGHEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Error: Version in package.json ($CURRENT_VERSION) is not the highest compared to main branch ($MAIN_VERSION)."
            exit 1
          else
            echo "Version in package.json ($CURRENT_VERSION) is higher than on the main branch ($MAIN_VERSION)."
          fi
  changelog:
    name: 'Check changelog update'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check if CHANGELOG.md has been updated
        run: |
          VERSION_IN_PACKAGE_JSON=$(node -p "require('./package.json').version")

          if ! grep -qE "# \[?$VERSION_IN_PACKAGE_JSON\]?" CHANGELOG.md; then
            echo "Error: CHANGELOG.md has not been updated for version $VERSION_IN_PACKAGE_JSON."
            exit 1
          else
            echo "CHANGELOG.md has been updated for version $VERSION_IN_PACKAGE_JSON."
          fi
  lint:
    name: 'Lint codebase'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install Dependencies
        run: npm install
      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
      - name: Run Stylelint and ESLint
        run: npm run ci-lint
  format:
    name: 'Check code formatting'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install Dependencies
        run: npm install
      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
      - name: Run Format Check
        run: npm run ci-format
  build:
    name: 'Build project'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm install
      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
      - name: Run the building...
        run: npm run ci-build
  test:
    name: 'Unit/integration/UI tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm install
      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
      - name: Run tests
        run: npm run ci-test
