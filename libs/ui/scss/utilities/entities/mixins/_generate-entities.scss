@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

/* stylelint-disable */
@mixin generate-entities($item, $infix, $is-rfs-media-query: false) {
	$values: map.get($item, values);

	// If the values are a list or string, convert it into a map
	@if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
		$values: list.zip($values, $values);
	}

	@each $key, $value in $values {
		$properties: map.get($item, property);

		// Multiple properties are possible, for example with vertical or horizontal margins or paddings
		@if type-of($properties) == 'string' {
			$properties: list.append((), $properties);
		}

		// Use custom class if present
		$property-class: if(map.has-key($item, class), map.get($item, class), list.nth($properties, 1));
		$property-class: if($property-class == null, '', $property-class);

		// State params to generate pseudo-classes
		$state: if(map.has-key($item, state), map.get($item, state), ());
		$infix: if($property-class == '' and string.slice($infix, 1, 1) == '-', string.slice($infix, 2), $infix);

		// Don't prefix if value key is null (eg. with shadow class)
		$property-class-modifier: if($key, if($property-class == '' and $infix == '', '', '-') + $key, '');

		@if map.get($item, rfs) {
			// Inside the media query
			@if $is-rfs-media-query {
				$val: rfs-value($value);

				// Do not render anything if fluid and non fluid values are the same
				$value: if($val == rfs-fluid-value($value), null, $val);
			} @else {
				$value: rfs-fluid-value($value);
			}
		}

		$is-css-var: map.get($item, css-var);
		$is-local-vars: map.get($item, local-vars);
		$is-rtl: map.get($item, rtl);

		@if $value != null {
			@if $is-rtl == false {
				/* rtl:begin:remove */
			}

			@if $is-css-var {
				.#{$property-class + $infix + $property-class-modifier} {
					--#{$property-class}: #{$value};
				}

				@each $pseudo in $state {
					.#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
						--#{$property-class}: #{$value};
					}
				}
			} @else {
				.#{$property-class + $infix + $property-class-modifier} {
					@each $property in $properties {
						@if $is-local-vars {
							@each $local-var, $value in $is-local-vars {
								--#{$local-var}: #{$value};
							}
						}

						#{$property}: $value if(true, !important, null);
					}
				}

				@each $pseudo in $state {
					.#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
						@each $property in $properties {
							#{$property}: $value if(true, !important, null);
						}
					}
				}
			}

			@if $is-rtl == false {
				/* rtl:end:remove */
			}
		}
	}
}
